{"version":3,"sources":["components/Button.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","value","isNaN","onClick","handleClick","Input","input","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addToInput","state","checkError","setState","handleEqual","lastInput","charAt","length","evaluate","_this2","Input_Input","Button_Button","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f56824dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst isOperator = (val) => {\r\n\treturn !isNaN(val) || val === \".\" || val === \"=\" ; // return false if input is operator\r\n}\r\n\r\nexport const Button = (props) => (\r\n\t<div className = {`btn-wrapper ${\r\n\tisOperator(props.value) ? null : \"operator\" }`} //set css for operator button\r\n\tonClick = {() => {props.handleClick(props.value)}}>\r\n\t\t{props.value}\r\n\t</div>\r\n )\r\nexport default Button;","\r\nimport React from 'react';\r\nimport './Input.css';\r\n\r\nexport const Input = (props) => (\r\n    <div className=\"input\">\r\n        {props.input}\r\n    </div>\r\n)\r\n\r\nexport default Input;","import React, { Component } from 'react';\nimport './App.css';\nimport { Button } from './components/Button';\nimport { Input } from './components/Input';\nimport { evaluate } from 'mathjs';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props); \n\t\tthis.state = {\n\t\t\tinput: \"\",\n\t\t\tcheckError: false\n\t\t}\n\t}\n\taddToInput = val => {\n\t\tif(!this.state.checkError) {\n\t\tthis.setState({input: this.state.input + val});\n\t\t} else {\n\t\t\tthis.setState({checkError: false});\n\t\t\treturn this.setState({input: \"\"});\n\t\t}\n  }\n\thandleEqual = () => {\n\t\t\n\t\tlet lastInput = this.state.input.charAt(this.state.input.length - 1); //last of input string\n\t\tif(isNaN(lastInput)) {\n\t\tthis.setState({\n\t\t\tinput: \"incorrect input\",\n\t\t\tcheckError: true \n\t\t\t});\n\t\t} else {\n\t\tthis.setState({input: evaluate(this.state.input)});\n\t\t}\n\t}\n\t\t\t\t\n\trender() {\n\t\treturn (\n\t\t<div className = \"app\">\n\t\t\t<div className = \"calculator-wrapper\">\n\t\t\t\t<Input input={this.state.input}></Input>\n\t\t\t\t<div className =\"row\">\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"7\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"8\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"9\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"*\"}></Button>\n\t\t\t\t</div>\n\t\t\t\t<div className =\"row\">\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"4\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"5\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"6\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"-\"}></Button>\n\t\t\t\t</div>\n\t\t\t\t<div className =\"row\">\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"1\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"2\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"3\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"+\"}></Button>\n\t\t\t\t</div>\n\t\t\t\t<div className =\"row\">\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"0\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\".\"}></Button>\n\t\t\t\t\t<Button handleClick={this.handleEqual} value={\"=\"}></Button>\n\t\t\t\t\t<Button handleClick={this.addToInput} value={\"/\"}></Button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<Button handleClick={() => this.setState({input: \"\"})} value={\"clear\"}></Button>\n\t\t\t\t</div>\t\n\t\t\t</div>\n\t\t</div>\n\t\t);\n\t}\n}\n\t\t\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}